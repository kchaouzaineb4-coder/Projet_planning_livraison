backend.by 


import pandas as pd
import math

class DeliveryProcessor:

    # =====================================================
    # ‚úÖ Fonction principale : traitement complet
    # =====================================================
    def process_delivery_data(self, liv_file, ydlogist_file, wcliegps_file):
        try:
            # Lecture des fichiers
            df_liv = self._load_livraisons(liv_file)
            df_yd = self._load_ydlogist(ydlogist_file)

            # Filtrage des donn√©es
            df_liv = self._filter_initial_data(df_liv)

            # Calcul Poids & Volume
            df_poids = self._calculate_weights(df_liv)
            df_vol = self._calculate_volumes(df_liv, df_yd)

            # Fusionner poids + volume
            df_merged = self._merge_delivery_data(df_poids, df_vol)

            # Ajouter Client et Ville
            df_final = self._add_city_client_info(df_merged, wcliegps_file)

            # Calcul Volume total en m3
            df_final["Volume de l'US"] = df_final["Volume de l'US"] / 1_000_000
            df_final["Volume total"] = df_final["Volume de l'US"] * df_final["Quantit√© livr√©e US"]

            # Regroupement par ville et client
            df_grouped, df_city = self._group_data(df_final)

            # Calcul du besoin en estafette
            df_city = self._calculate_estafette_need(df_city)

            # Nouveau tableau : ajout Zone
            df_grouped_zone = self._add_zone(df_grouped)

            return df_grouped, df_city, df_grouped_zone

        except Exception as e:
            raise Exception(f"‚ùå Erreur lors du traitement des donn√©es : {str(e)}")

    # =====================================================
    # üîπ Chargement des donn√©es
    # =====================================================
    def _load_livraisons(self, liv_file):
        df = pd.read_excel(liv_file)
        df.rename(columns={df.columns[4]: "Quantit√© livr√©e US"}, inplace=True)
        return df

    def _load_ydlogist(self, file_path):
        df = pd.read_excel(file_path)
        df.rename(columns={df.columns[16]: "Unit√© Volume", df.columns[13]: "Poids de l'US"}, inplace=True)
        return df

    # =====================================================
    # üîπ Filtrage
    # =====================================================
    def _filter_initial_data(self, df):
        clients_exclus = [
            "AMECAP", "SANA", "SOPAL", "SOPALGAZ", "SOPALSERV", "SOPALTEC",
            "SOPALALG", "AQUA", "WINOX", "QUIVEM", "SANISTONE",
            "SOPAMAR", "SOPALAFR", "SOPALINTER"
        ]
        return df[(df["Type livraison"] != "SDC") & (~df["Client commande"].isin(clients_exclus))]

    # =====================================================
    # üîπ Calcul Poids
    # =====================================================
    def _calculate_weights(self, df):
        df["Poids de l'US"] = pd.to_numeric(df["Poids de l'US"].astype(str).str.replace(",", ".").str.replace(r"[^\d.]", "", regex=True), errors="coerce").fillna(0)
        df["Quantit√© livr√©e US"] = pd.to_numeric(df["Quantit√© livr√©e US"], errors="coerce").fillna(0)
        df["Poids total"] = df["Quantit√© livr√©e US"] * df["Poids de l'US"]
        return df[["No livraison", "Article", "Client commande", "Poids total"]]

    # =====================================================
    # üîπ Calcul Volume
    # =====================================================
    def _calculate_volumes(self, df_liv, df_art):
        df_liv_sel = df_liv[["No livraison", "Article", "Quantit√© livr√©e US", "Client commande"]]
        df_art_sel = df_art[["Article", "Volume de l'US", "Unit√© Volume"]].copy()
        df_art_sel["Volume de l'US"] = pd.to_numeric(df_art_sel["Volume de l'US"].astype(str).str.replace(",", "."), errors="coerce")
        return pd.merge(df_liv_sel, df_art_sel, on="Article", how="left")

    # =====================================================
    # üîπ Fusion
    # =====================================================
    def _merge_delivery_data(self, df_poids, df_vol):
        return pd.merge(df_poids, df_vol, on=["No livraison", "Article", "Client commande"], how="left")

    # =====================================================
    # üîπ Ajout Client & Ville
    # =====================================================
    def _add_city_client_info(self, df, wcliegps_file):
        df_clients = pd.read_excel(wcliegps_file)
        return pd.merge(df, df_clients[["Client", "Ville"]], left_on="Client commande", right_on="Client", how="left")

    # =====================================================
    # üîπ Groupement
    # =====================================================
    def _group_data(self, df):
        df_grouped = df.groupby(["No livraison", "Client", "Ville"], as_index=False).agg({
            "Article": lambda x: ", ".join(x.astype(str)),
            "Poids total": "sum",
            "Volume total": "sum"
        })
        df_city = df_grouped.groupby("Ville", as_index=False).agg({
            "Poids total": "sum",
            "Volume total": "sum",
            "No livraison": "count"
        }).rename(columns={"No livraison": "Nombre livraisons"})
        return df_grouped, df_city

    # =====================================================
    # üîπ Calcul besoin estafette
    # =====================================================
    def _calculate_estafette_need(self, df_city):
        poids_max = 1550
        volume_max = 1.2 * 1.2 * 0.8 * 4
        df_city["Besoin estafette (poids)"] = df_city["Poids total"].apply(lambda p: math.ceil(p / poids_max))
        df_city["Besoin estafette (volume)"] = df_city["Volume total"].apply(lambda v: math.ceil(v / volume_max))
        df_city["Besoin estafette r√©el"] = df_city[["Besoin estafette (poids)", "Besoin estafette (volume)"]].max(axis=1)
        return df_city

    # =====================================================
    # üîπ Ajout Zone
    # =====================================================
    def _add_zone(self, df):
        zones = {
            "Zone 1": ["TUNIS","ARIANA","MANOUBA","BEN AROUS","BIZERTE","MATEUR","MENZEL BOURGUIBA","UTIQUE"],
            "Zone 2": ["NABEUL","HAMMAMET","KORBA","MENZEL TEMIME","KELIBIA","SOLIMAN"],
            "Zone 3": ["SOUSSE","MONASTIR","MAHDIA","KAIROUAN"],
            "Zone 4": ["GAB√àS","MEDENINE","ZARZIS","DJERBA"],
            "Zone 5": ["GAFSA","KASSERINE","TOZEUR","NEFTA","DOUZ"],
            "Zone 6": ["JENDOUBA","B√âJA","LE KEF","TABARKA","SILIANA"],
            "Zone 7": ["SFAX"]
        }
        def get_zone(ville):
            ville = str(ville).upper().strip()
            for z, villes in zones.items():
                if ville in villes:
                    return z
            return "Zone inconnue"
        df["Zone"] = df["Ville"].apply(get_zone)
        return df

    # =====================================================
    # ‚úÖ Export fichiers Excel
    # =====================================================
    def export_results(self, df_grouped, df_city, df_grouped_zone, path_grouped, path_city, path_zone):
        df_grouped.to_excel(path_grouped, index=False)
        df_city.to_excel(path_city, index=False)
        df_grouped_zone.to_excel(path_zone, index=False)
        return True


app.py 



import streamlit as st
import pandas as pd
from backend import DeliveryProcessor
import os

# Configuration page
st.set_page_config(page_title="Planning Livraisons", layout="wide")
st.title("Planning de Livraisons - Streamlit")

# Upload fichiers
liv_file = st.file_uploader("Fichier Livraisons", type=["xlsx"])
ydlogist_file = st.file_uploader("Fichier YDLOGIST", type=["xlsx"])
wcliegps_file = st.file_uploader("Fichier WCLIEGPS", type=["xlsx"])

if st.button("Ex√©cuter le traitement complet"):
    if liv_file and ydlogist_file and wcliegps_file:
        processor = DeliveryProcessor()
        try:
            # Traitement complet
            df_grouped, df_city, df_grouped_zone = processor.process_delivery_data(
                liv_file, ydlogist_file, wcliegps_file
            )

            # --------------------------
            # 1Ô∏è‚É£ Tableau original par Client & Ville
            # --------------------------
            st.subheader("Tableau original : Livraisons par Client & Ville")
            st.dataframe(df_grouped)

            # Bouton t√©l√©chargement
            path_grouped = "Livraison_par_Client_Ville.xlsx"
            path_city = "Besoin_estafette_par_Ville.xlsx"
            path_zone = "Livraison_Client_Ville_Zone.xlsx"
            
            processor.export_results(df_grouped, df_city, df_grouped_zone, path_grouped, path_city, path_zone)

            with open(path_grouped, "rb") as f:
                st.download_button(
                    label="T√©l√©charger Tableau Client & Ville",
                    data=f,
                    file_name=path_grouped,
                    mime="application/vnd.openxmlformats-officedocument.spreadsheetml.sheet"
                )

            # --------------------------
            # 2Ô∏è‚É£ Besoin estafette par Ville
            # --------------------------
            st.subheader("Besoin estafette par Ville")
            st.dataframe(df_city)

            with open(path_city, "rb") as f:
                st.download_button(
                    label="T√©l√©charger Besoin Estafette par Ville",
                    data=f,
                    file_name=path_city,
                    mime="application/vnd.openxmlformats-officedocument.spreadsheetml.sheet"
                )

            # --------------------------
            # 3Ô∏è‚É£ Tableau Client & Ville + Zone
            # --------------------------
            st.subheader("Tableau : Livraisons par Client & Ville + Zone")
            st.dataframe(df_grouped_zone)

            with open(path_zone, "rb") as f:
                st.download_button(
                    label="T√©l√©charger Tableau Client & Ville + Zone",
                    data=f,
                    file_name=path_zone,
                    mime="application/vnd.openxmlformats-officedocument.spreadsheetml.sheet"
                )

            # --------------------------
            # Graphiques statistiques par ville
            # --------------------------
            st.subheader("Statistiques par Ville")

            import plotly.express as px
            col1, col2 = st.columns(2)
            with col1:
                fig1 = px.bar(df_city, x="Ville", y="Poids total",
                              title="Poids total livr√© par ville")
                st.plotly_chart(fig1, use_container_width=True)
            with col2:
                fig2 = px.bar(df_city, x="Ville", y="Volume total",
                              title="Volume total par ville (m¬≥)")
                st.plotly_chart(fig2, use_container_width=True)

            col3, col4 = st.columns(2)
            with col3:
                fig3 = px.bar(df_city, x="Ville", y="Nombre livraisons",
                              title="Nombre de livraisons par ville")
                st.plotly_chart(fig3, use_container_width=True)
            with col4:
                fig4 = px.bar(df_city, x="Ville", y="Besoin estafette r√©el",
                              title="Nombre d'estafettes n√©cessaires par ville")
                st.plotly_chart(fig4, use_container_width=True)

        except Exception as e:
            st.error(f"‚ùå Erreur lors du traitement : {str(e)}")
    else:
        st.warning("Veuillez uploader tous les fichiers n√©cessaires.")
