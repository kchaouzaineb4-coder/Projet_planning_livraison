import pandas as pd
import numpy as np
import math


class DeliveryProcessor:

    # =====================================================
    # ‚úÖ Fonction principale : traitement complet
    # =====================================================
    def process_delivery_data(self, liv_file, ydlogist_file, wcliegps_file):
        try:
            # Lecture des fichiers
            df_liv = self._load_livraisons(liv_file)
            df_yd = self._load_ydlogist(ydlogist_file)

            # Filtrage des donn√©es
            df_liv = self._filter_initial_data(df_liv)

            # Calcul Poids & Volume
            df_poids = self._calculate_weights(df_liv)
            df_vol = self._calculate_volumes(df_liv, df_yd)

            # Fusionner poids + volume
            df_merged = self._merge_delivery_data(df_poids, df_vol)

            # Ajouter Client et Ville
            df_final = self._add_city_client_info(df_merged, wcliegps_file)

            # Calcul Volume total en m3
            df_final["Volume de l'US"] = df_final["Volume de l'US"] / 1_000_000
            df_final["Volume total"] = df_final["Volume de l'US"] * df_final["Quantit√© livr√©e US"]

            # Regroupement par ville et client
            df_grouped, df_city = self._group_data(df_final)

            # Calcul du besoin en estafette
            df_city = self._calculate_estafette_need(df_city)

            return df_grouped, df_city

        except Exception as e:
            raise Exception(f"‚ùå Erreur lors du traitement des donn√©es : {str(e)}")


    # =====================================================
    # üîπ Chargement des donn√©es
    # =====================================================
    def _load_livraisons(self, liv_file):
        df = pd.read_excel(liv_file)

        # Normaliser nom colonne quantit√©
        df.rename(columns={df.columns[4]: "Quantit√© livr√©e US"}, inplace=True)

        return df

    def _load_ydlogist(self, file_path):
        df = pd.read_excel(file_path)
        df.rename(columns={
            df.columns[16]: "Unit√© Volume",
            df.columns[13]: "Poids de l'US"
        }, inplace=True)
        return df


    # =====================================================
    # üîπ Pr√©-traitement : filtrage
    # =====================================================
    def _filter_initial_data(self, df):
        clients_exclus = [
            "AMECAP", "SANA", "SOPAL", "SOPALGAZ", "SOPALSERV", "SOPALTEC",
            "SOPALALG", "AQUA", "WINOX", "QUIVEM", "SANISTONE",
            "SOPAMAR", "SOPALAFR", "SOPALINTER"
        ]

        return df[
            (df["Type livraison"] != "SDC") &
            (~df["Client commande"].isin(clients_exclus))
        ]


    # =====================================================
    # üîπ Calculs poids / volume
    # =====================================================
    def _calculate_weights(self, df):
        df = df.copy()

        df["Poids de l'US"] = pd.to_numeric(
            df["Poids de l'US"].astype(str)
            .str.replace(",", ".")
            .str.replace(r"[^\d.]", "", regex=True),
            errors="coerce"
        ).fillna(0)

        df["Quantit√© livr√©e US"] = pd.to_numeric(df["Quantit√© livr√©e US"], errors="coerce").fillna(0)

        df["Poids total"] = df["Quantit√© livr√©e US"] * df["Poids de l'US"]

        return df[["No livraison", "Article", "Client commande", "Poids total"]]


    def _calculate_volumes(self, df_liv, df_art):
        df_liv_sel = df_liv[["No livraison", "Article", "Quantit√© livr√©e US", "Client commande"]]

        df_art_sel = df_art[["Article", "Volume de l'US", "Unit√© Volume"]].copy()
        df_art_sel["Volume de l'US"] = pd.to_numeric(
            df_art_sel["Volume de l'US"].astype(str).str.replace(",", "."),
            errors="coerce"
        )

        return pd.merge(df_liv_sel, df_art_sel, on="Article", how="left")


    # =====================================================
    # üîπ Fusion
    # =====================================================
    def _merge_delivery_data(self, df_poids, df_vol):
        return pd.merge(df_poids, df_vol,
                        on=["No livraison", "Article", "Client commande"],
                        how="left")


    # =====================================================
    # üîπ Ajout Client & Ville
    # =====================================================
    def _add_city_client_info(self, df, wcliegps_file):
        df_clients = pd.read_excel(wcliegps_file)

        df = pd.merge(
            df,
            df_clients[["Client", "Ville"]],
            left_on="Client commande",
            right_on="Client",
            how="left"
        )

        return df


    # =====================================================
    # üîπ Groupement par client et par ville
    # =====================================================
    def _group_data(self, df):
        df_grouped = df.groupby(
            ["No livraison", "Client", "Ville"], as_index=False
        ).agg({
            "Article": lambda x: ", ".join(x.astype(str)),
            "Poids total": "sum",
            "Volume total": "sum"
        })

        df_city = df_grouped.groupby(["Ville"], as_index=False).agg({
            "Poids total": "sum",
            "Volume total": "sum",
            "No livraison": "count"
        }).rename(columns={"No livraison": "Nombre livraisons"})

        return df_grouped, df_city


    # =====================================================
    # üîπ Calcul besoin estafette par ville
    # =====================================================
    def _calculate_estafette_need(self, df_city):
        poids_max = 1550
        volume_max = 1.2 * 1.2 * 0.8 * 4  # volume v√©hicule

        df_city["Besoin estafette (poids)"] = df_city["Poids total"].apply(
            lambda p: math.ceil(p / poids_max)
        )

        df_city["Besoin estafette (volume)"] = df_city["Volume total"].apply(
            lambda v: math.ceil(v / volume_max)
        )

        df_city["Besoin estafette r√©el"] = df_city[
            ["Besoin estafette (poids)", "Besoin estafette (volume)"]
        ].max(axis=1)

        return df_city


    # =====================================================
    # ‚úÖ Export des fichiers Excel
    # =====================================================
    def export_results(self, df_grouped, df_city, path_grouped, path_city):
        df_grouped.to_excel(path_grouped, index=False)
        df_city.to_excel(path_city, index=False)
        return True








APP.PY 






import streamlit as st
import pandas as pd
import plotly.express as px
from backend import DeliveryProcessor

st.set_page_config(page_title="Planning Livraisons", layout="wide")
st.title("Planning de Livraisons - Streamlit")

# Upload fichiers
liv_file = st.file_uploader("Fichier Livraisons", type=["xlsx"])
ydlogist_file = st.file_uploader("Fichier YDLOGIST", type=["xlsx"])
wcliegps_file = st.file_uploader("Fichier WCLIEGPS", type=["xlsx"])

if st.button("Ex√©cuter le traitement complet"):
    if liv_file and ydlogist_file and wcliegps_file:

        processor = DeliveryProcessor()
        try:
            df_grouped, df_city = processor.process_delivery_data(liv_file, ydlogist_file, wcliegps_file)

            # --------------------------
            # Tableau d√©taill√©
            # --------------------------
            st.subheader("R√©sultat : Livraisons par Client & Ville")
            st.dataframe(df_grouped)

            # Export Excel
            path_grouped = "Livraison_finale_avec_ville_et_client.xlsx"
            path_city = "Livraison_Besoin_Estafette.xlsx"
            processor.export_results(df_grouped, df_city, path_grouped, path_city)

            with open(path_grouped, "rb") as f1:
                st.download_button(
                    label="T√©l√©charger Tableau D√©tails Livraisons",
                    data=f1,
                    file_name=path_grouped,
                    mime="application/vnd.openxmlformats-officedocument.spreadsheetml.sheet",
                )

            with open(path_city, "rb") as f2:
                st.download_button(
                    label="T√©l√©charger Besoin Estafette par Ville",
                    data=f2,
                    file_name=path_city,
                    mime="application/vnd.openxmlformats-officedocument.spreadsheetml.sheet",
                )

            # --------------------------
            # Graphiques statistiques par ville
            # --------------------------
            st.subheader("Statistiques par Ville")

            col1, col2 = st.columns(2)
            with col1:
                fig1 = px.bar(df_city, x="Ville", y="Poids total",
                              title="Poids total livr√© par ville")
                st.plotly_chart(fig1, use_container_width=True)

            with col2:
                fig2 = px.bar(df_city, x="Ville", y="Besoin estafette r√©el",
                              title="Nombre d'estafettes n√©cessaires par ville")
                st.plotly_chart(fig2, use_container_width=True)

            # ‚≠ê‚≠ê‚≠ê Nouveaux Graphes ‚≠ê‚≠ê‚≠ê
            st.subheader("Nouveaux Graphiques")

            col3, col4 = st.columns(2)
            with col3:
                fig3 = px.bar(df_city, x="Ville", y="Nombre livraisons",
                              title="Nombre de livraisons par ville")
                st.plotly_chart(fig3, use_container_width=True)

            with col4:
                fig4 = px.bar(df_city, x="Ville", y="Volume total",
                              title="Volume total par ville (m¬≥)")
                st.plotly_chart(fig4, use_container_width=True)

        except Exception as e:
            st.error(f"Erreur : {str(e)}")

    else:
        st.warning("Veuillez uploader tous les fichiers n√©cessaires.")

