                            

                                     Backend 


import pandas as pd
import numpy as np

class DeliveryProcessor:
    def __init__(self):
        self.MAX_POIDS = 1550.0  # kg
        self.MAX_VOLUME = 4.608  # m3

    def process_delivery_data(self, liv_file, ydlogist_file, wcliegps_file):
        try:
            # Charger et renommer les colonnes critiques
            df_liv = pd.read_excel(liv_file)
            df_liv.rename(columns={df_liv.columns[4]: "Quantité livrée US"}, inplace=True)

            # Filtrage initial
            df_liv = self._filter_initial_data(df_liv)

            # Traitement YDLOGIST
            df_yd = self._process_ydlogist(ydlogist_file)

            # Calcul volumes et poids
            df_vol = self._calculate_volumes(df_liv, df_yd)
            df_poids = self._calculate_weights(df_liv)

            # Fusion volume/poids
            df_final = self._merge_volume_weight(df_vol, df_poids)

            # Ajouter info client/ville
            df_final = self._add_city_client_info(df_final, wcliegps_file)

            # Supprimer colonnes inutiles et convertir volume en m³
            df_final = df_final.drop(columns=["Client commande", "Unité Volume"], errors='ignore')
            df_final["Volume de l'US"] = df_final["Volume de l'US"] / 1_000_000  # cm3 -> m3

            # Calcul Volume total = Volume de l'US * Quantité livrée US
            df_final["Volume total"] = df_final["Volume de l'US"] * df_final["Quantité livrée US"]

            # Supprimer les colonnes individuelles
            df_final = df_final.drop(columns=["Volume de l'US", "Quantité livrée US"], errors='ignore')

            # Regrouper par No livraison pour combiner les articles
            df_grouped = df_final.groupby(["No livraison", "Client", "Ville"]).agg({
                "Article": lambda x: ", ".join(x.astype(str)),
                "Poids total": "sum",
                "Volume total": "sum"
            }).reset_index()

            return df_grouped

        except Exception as e:
            raise Exception(f"Erreur lors du traitement des données: {str(e)}")

    def _filter_initial_data(self, df):
        df = df[df["Type livraison"] != "SDC"]
        clients_a_supprimer = [
            "AMECAP", "SANA", "SOPAL", "SOPALGAZ", "SOPALSERV", "SOPALTEC",
            "SOPALALG", "AQUA", "WINOX", "QUIVEM", "SANISTONE", "SOPAMAR",
            "SOPALAFR", "SOPALINTER"
        ]
        return df[~df["Client commande"].isin(clients_a_supprimer)]

    def _process_ydlogist(self, file_path):
        df = pd.read_excel(file_path)
        renommage = {
            df.columns[2]: "Catégorie",
            df.columns[5]: "Acheté",
            df.columns[6]: "Fabriqué",
            df.columns[8]: "Unité Stock",
            df.columns[9]: "Date création",
            df.columns[13]: "Unité Poids",
            df.columns[16]: "Unité Volume"
        }
        return df.rename(columns=renommage)

    def _calculate_volumes(self, df_liv, df_art):
        df_liv_sel = df_liv[["No livraison", "Article","Quantité livrée US"]]
        df_art_sel = df_art[["Article", "Volume de l'US", "Unité Volume"]]
        df_art_sel["Volume de l'US"] = pd.to_numeric(
            df_art_sel["Volume de l'US"].astype(str).str.replace(",", "."),
            errors="coerce"
        )
        return pd.merge(df_liv_sel, df_art_sel, on="Article", how="left")

    def _calculate_weights(self, df):
        df["Poids de l'US"] = pd.to_numeric(
            df["Poids de l'US"].astype(str).str.replace(",", ".").str.replace(r"[^\d.]", "", regex=True),
            errors="coerce"
        ).fillna(0)
        df["Quantité livrée US"] = pd.to_numeric(df["Quantité livrée US"], errors="coerce").fillna(0)
        df["Poids total"] = df["Quantité livrée US"] * df["Poids de l'US"]
        return df.groupby(["No livraison", "Client commande"], as_index=False)["Poids total"].sum()

    def _merge_volume_weight(self, df_vol, df_poids):
        return pd.merge(df_poids, df_vol, on="No livraison", how="left")

    def _add_city_client_info(self, df, wcliegps_file):
        df_clients = pd.read_excel(wcliegps_file)
        df = pd.merge(
            df,
            df_clients[["Client", "Ville"]],
            left_on="Client commande",
            right_on="Client",
            how="left"
        )
        df = df[~df["Ville"].isin(["TRIPOLI"])]
        df = df[df["Client commande"] != "PERSOGSO"]
        return df

    def export_results(self, df, output_path):
        df.to_excel(output_path, index=False)
        return True


                               App.py


import streamlit as st
import pandas as pd
import plotly.graph_objects as go
from backend import DeliveryProcessor

st.set_page_config(page_title="Planning Livraisons", layout="wide")
st.title("Planning de Livraisons - Streamlit")

# Upload fichiers
liv_file = st.file_uploader("Fichier Livraisons", type=["xlsx"])
ydlogist_file = st.file_uploader("Fichier YDLOGIST", type=["xlsx"])
wcliegps_file = st.file_uploader("Fichier WCLIEGPS", type=["xlsx"])

if st.button("Exécuter le traitement complet"):
    if liv_file and ydlogist_file and wcliegps_file:
        processor = DeliveryProcessor()
        try:
            df_result = processor.process_delivery_data(liv_file, ydlogist_file, wcliegps_file)
            
            # Affichage du tableau
            st.subheader("Aperçu des résultats")
            st.dataframe(df_result)
            
            # Bouton pour télécharger le fichier final
            output_path = "Livraison_finale_avec_ville_et_client.xlsx"
            processor.export_results(df_result, output_path)
            with open(output_path, "rb") as f:
                st.download_button(
                    label="Télécharger les résultats",
                    data=f,
                    file_name="Livraison_finale_avec_ville_et_client.xlsx",
                    mime="application/vnd.openxmlformats-officedocument.spreadsheetml.sheet"
                )
            
            # --- Graphique combiné par ville ---
            df_ville = df_result.groupby("Ville").agg(
                Nombre_livraisons=("No livraison", "nunique"),
                Poids_total=("Poids total", "sum"),
                Volume_total=("Volume total", "sum")
            ).reset_index()

            fig = go.Figure()
            fig.add_trace(go.Bar(
                x=df_ville["Ville"],
                y=df_ville["Nombre_livraisons"],
                name="Nombre de livraisons",
                marker_color='steelblue'
            ))
            fig.add_trace(go.Bar(
                x=df_ville["Ville"],
                y=df_ville["Poids_total"],
                name="Poids total (kg)",
                marker_color='darkorange'
            ))
            fig.add_trace(go.Bar(
                x=df_ville["Ville"],
                y=df_ville["Volume_total"],
                name="Volume total (m³)",
                marker_color='green'
            ))

            fig.update_layout(
                title="Statistiques des livraisons par ville",
                xaxis=dict(title="Ville"),
                yaxis=dict(title="Quantité"),
                barmode='group',
                legend=dict(x=1.05, y=1)
            )

            st.plotly_chart(fig, use_container_width=True)

        except Exception as e:
            st.error(f"Erreur : {str(e)}")
    else:
        st.warning("Veuillez uploader tous les fichiers nécessaires.")




                          requirements.txt



streamlit
pandas
numpy
plotly
openpyxl


                        Cmd    ( avec lien local ) 




py -m pip install -r requirements.txt

py -m streamlit run app.py


                            Cmd avec lien publique 


* Apres le collage du code backend.py et app.py dans vs code ecrire dans le terminal du vs code 
                
            cd "C:\Users\zaineb.KCHAOU\Desktop\Projet_planning_livraison"           

*dans cmd ecrie 
           
            cd "C:\Users\zaineb.KCHAOU\Desktop\Projet_planning_livraison"
          
            git status

            git add .

            git commit -m "Correction : support fichiers .xls et mise à jour requirements"

            git push

* Et apres ouvre streamlit cloud et ouvre l'app web 
          
          